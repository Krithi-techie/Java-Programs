import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.*;

public class MostCommonWord {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter directory name: ");
        String directoryName = scanner.nextLine();

        Map<String, Integer> wordFrequency = new HashMap<>();

        try {
            processFiles(new File(directoryName), wordFrequency);
        } catch (IOException e) {
            System.out.println("Error reading files: " + e.getMessage());
            return;
        }

        List<String> mostCommonWords = findMostCommonWords(wordFrequency);
        for (String word : mostCommonWords) {
            System.out.println("Word: " + word + ", Frequency: " + wordFrequency.get(word));
        }
    }

    private static void processFiles(File directory, Map<String, Integer> wordFrequency) throws IOException {
        if (directory.isDirectory()) {
            File[] files = directory.listFiles();
            if (files != null) {
                for (File file : files) {
                    if (file.isFile()) {
                        countWordsInFile(file, wordFrequency);
                    }
                }
            }
        }
    }

    private static void countWordsInFile(File file, Map<String, Integer> wordFrequency) throws IOException {
        FileReader fileReader = new FileReader(file);
        BufferedReader bufferedReader = new BufferedReader(fileReader);
        String line;

        while ((line = bufferedReader.readLine()) != null) {
            String[] words = line.toLowerCase().split("\\s+");
            for (String word : words) {
                wordFrequency.put(word, wordFrequency.getOrDefault(word, 0) + 1);
            }
        }

        bufferedReader.close();
    }

    private static List<String> findMostCommonWords(Map<String, Integer> wordFrequency) {
        int maxFrequency = Collections.max(wordFrequency.values());
        List<String> mostCommonWords = new ArrayList<>();

        for (Map.Entry<String, Integer> entry : wordFrequency.entrySet()) {
            if (entry.getValue() == maxFrequency) {
                mostCommonWords.add(entry.getKey());
            }
        }

        return mostCommonWords;
    }
}
